const fs = require('fs')
const ejs = require('ejs')
const path = require('path')
const babel = require('@babel/core')
const t = require('@babel/types')

class Compiler {
  constructor (config) {
    // save webpack configuration
    this.config = config
    // save modules by { path as key, code as value }
    this.modules = {}
  }

  run (path) {
    this.buildModule(this.config.entry)
    this.emitFile()
  }

  buildModule (modulePath) {
    const code = this.getSource(modulePath)
    // change current module's code
    const { result, dependencies } = this.parseModule(code)
    // save entry module code into modules
    this.modules[modulePath] = result
    // save dependencies into modules
    dependencies.forEach((dependencyPath) => {
      this.buildModule(dependencyPath)
    })
  }

  parseModule (code) {
    const rootPath = path.dirname(this.config.entry)
    const dependencies = []
    // code => AST
    const ast = babel.parse(code)
    // modify AST
    babel.traverse(ast, {
      CallExpression (nodePath) {
        const node = nodePath.node
        if (node.callee.name === 'require') {
          // require => __webpack_require__
          node.callee.name = '__webpack_require__'
          // change file path
          let modulePath = node.arguments[0].value
          modulePath = '.\\' + path.join(rootPath, modulePath)
          modulePath = modulePath.replace(/\\/g, '/')
          dependencies.push(modulePath)
          node.arguments[0] = t.StringLiteral(modulePath)
        }
      }
    })
    // AST => code
    const { code: result } = babel.transformFromAstSync(ast)
    return { result, dependencies }
  }

  getSource (path) {
    return fs.readFileSync(path, 'utf-8')
  }

  emitFile () {
    // get ejs template
    const template = fs.readFileSync(path.resolve(__dirname, 'main.ejs'), 'utf-8')
    // replace contents in the template
    const code = ejs.render(template, { entryId: this.config.entry, modules: this.modules })
    // write result into file
    const outputDir = this.config.output.path
    // create output directory if not exist
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir)
    }
    fs.writeFileSync(path.resolve(outputDir, this.config.output.filename), code)
  }
}

module.exports = Compiler
